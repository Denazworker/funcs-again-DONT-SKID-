

getgenv().getinstances = function()
	return game:GetDescendants()
end

getinstances = getgenv().getinstances
-- Returns the in-game FPS cap.
getgenv()["getfpscap"] = newcclosure(function()
    return getrenv()["workspace"]:GetRealPhysicsFPS()
end)

getgenv()["get_fps_cap"] = getfpscap
getgenv()["GetFpsCap"] = getfpscap
getgenv()["getfpscap"] = getfpscap


getgenv().getexecutioncontext = function()
    local runService = game:GetService("RunService")
    
    if runService:IsClient() then
        return "Client"
    elseif runService:IsServer() then
        return "Server"
    else
        return "Studio"
    end
end

getgenv().getallthreads = function()
    local threads = {}
    local index = 1

    while true do
        local thread = debug.getthread(index)
        if thread then
            threads[index] = thread
            index = index + 1
        else
            break
        end
    end

    return threads
end

getgenv().securecall = function(Closure, Spoof, ...)
    assert(typeof(Spoof) == "Instance" and (Spoof.ClassName == "LocalScript" or Spoof.ClassName == "ModuleScript"),
           "invalid argument #1 to 'securecall' (LocalScript or ModuleScript expected)")

    local OldScript = getfenv().script
    local OldThreadID = getidentity()

    getfenv().script = Spoof
    setidentity(2)

    local success, err = pcall(Closure, ...)

    setidentity(OldThreadID)
    getfenv().script = OldScript

    if not success then
        error(err)
    end
end

getgenv().getactors = function()
return getproperties(workspace)
end

getgenv().run_on_actor = newcclosure(function(actor, code, argument)
    assert(typeof(actor) == "Instance", ('bad argument #1 to \'run_on_actor\' (Instance expected, got %s)'):format(typeof(actor)))
    assert(actor.ClassName == "Actor", ('bad argument #1 to \'run_on_actor\' (Actor expected, got %s)') : format(actor.ClassName))
    assert(typeof(code) == "string", ('bad argument #2 to \'run_on_actor\' (string expected, got %s)') : format(typeof(code)))

    local custom_env = {
        isactor = isactor_true
    };
    local env = setmetatable({}, {
        __index = newcclosure(function(self, idx)
            if (custom_env[idx]) then return custom_env[idx] end
            return getgenv()[idx]
        end),
        __newindex = newcclosure(function(self, idx, val)
            custom_env[idx] = val
        end)
    })

    setfenv(loadstring(code), env)(argument)
end)

getgenv().gethui = function()
    local success, hui = pcall(function()
        return game:GetService("CoreGui")["RobloxGui"]
    end)
    if success then
        return hui
    else
        warn("Failed to get RobloxGui")
        return nil
    end
end



gethui = getgenv().gethui
